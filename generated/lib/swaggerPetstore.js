"use strict";
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var msRest = __importStar(require("@azure/ms-rest-js"));
var Models = __importStar(require("./models"));
exports.SwaggerPetstoreModels = Models;
var Mappers = __importStar(require("./models/mappers"));
exports.SwaggerPetstoreMappers = Mappers;
var Parameters = __importStar(require("./models/parameters"));
var swaggerPetstoreContext_1 = require("./swaggerPetstoreContext");
exports.SwaggerPetstoreContext = swaggerPetstoreContext_1.SwaggerPetstoreContext;
var SwaggerPetstore = /** @class */ (function (_super) {
    __extends(SwaggerPetstore, _super);
    /**
     * Initializes a new instance of the SwaggerPetstore class.
     * @param [options] The parameter options
     */
    function SwaggerPetstore(options) {
        return _super.call(this, options) || this;
    }
    SwaggerPetstore.prototype.addPet = function (body, options, callback) {
        return this.sendOperationRequest({
            body: body,
            options: options
        }, addPetOperationSpec, callback);
    };
    SwaggerPetstore.prototype.updatePet = function (body, options, callback) {
        return this.sendOperationRequest({
            body: body,
            options: options
        }, updatePetOperationSpec, callback);
    };
    SwaggerPetstore.prototype.findPetsByStatus = function (status, options, callback) {
        return this.sendOperationRequest({
            status: status,
            options: options
        }, findPetsByStatusOperationSpec, callback);
    };
    SwaggerPetstore.prototype.findPetsByTags = function (tags, options, callback) {
        return this.sendOperationRequest({
            tags: tags,
            options: options
        }, findPetsByTagsOperationSpec, callback);
    };
    SwaggerPetstore.prototype.getPetById = function (petId, options, callback) {
        return this.sendOperationRequest({
            petId: petId,
            options: options
        }, getPetByIdOperationSpec, callback);
    };
    SwaggerPetstore.prototype.updatePetWithForm = function (petId, options, callback) {
        return this.sendOperationRequest({
            petId: petId,
            options: options
        }, updatePetWithFormOperationSpec, callback);
    };
    SwaggerPetstore.prototype.deletePet = function (petId, options, callback) {
        return this.sendOperationRequest({
            petId: petId,
            options: options
        }, deletePetOperationSpec, callback);
    };
    SwaggerPetstore.prototype.uploadFile = function (petId, options, callback) {
        return this.sendOperationRequest({
            petId: petId,
            options: options
        }, uploadFileOperationSpec, callback);
    };
    SwaggerPetstore.prototype.getInventory = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, getInventoryOperationSpec, callback);
    };
    SwaggerPetstore.prototype.placeOrder = function (body, options, callback) {
        return this.sendOperationRequest({
            body: body,
            options: options
        }, placeOrderOperationSpec, callback);
    };
    SwaggerPetstore.prototype.getOrderById = function (orderId, options, callback) {
        return this.sendOperationRequest({
            orderId: orderId,
            options: options
        }, getOrderByIdOperationSpec, callback);
    };
    SwaggerPetstore.prototype.deleteOrder = function (orderId, options, callback) {
        return this.sendOperationRequest({
            orderId: orderId,
            options: options
        }, deleteOrderOperationSpec, callback);
    };
    SwaggerPetstore.prototype.createUser = function (body, options, callback) {
        return this.sendOperationRequest({
            body: body,
            options: options
        }, createUserOperationSpec, callback);
    };
    SwaggerPetstore.prototype.createUsersWithArrayInput = function (body, options, callback) {
        return this.sendOperationRequest({
            body: body,
            options: options
        }, createUsersWithArrayInputOperationSpec, callback);
    };
    SwaggerPetstore.prototype.createUsersWithListInput = function (body, options, callback) {
        return this.sendOperationRequest({
            body: body,
            options: options
        }, createUsersWithListInputOperationSpec, callback);
    };
    SwaggerPetstore.prototype.loginUser = function (username, password, options, callback) {
        return this.sendOperationRequest({
            username: username,
            password: password,
            options: options
        }, loginUserOperationSpec, callback);
    };
    SwaggerPetstore.prototype.logoutUser = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, logoutUserOperationSpec, callback);
    };
    SwaggerPetstore.prototype.getUserByName = function (username, options, callback) {
        return this.sendOperationRequest({
            username: username,
            options: options
        }, getUserByNameOperationSpec, callback);
    };
    SwaggerPetstore.prototype.updateUser = function (username, body, options, callback) {
        return this.sendOperationRequest({
            username: username,
            body: body,
            options: options
        }, updateUserOperationSpec, callback);
    };
    SwaggerPetstore.prototype.deleteUser = function (username, options, callback) {
        return this.sendOperationRequest({
            username: username,
            options: options
        }, deleteUserOperationSpec, callback);
    };
    return SwaggerPetstore;
}(swaggerPetstoreContext_1.SwaggerPetstoreContext));
exports.SwaggerPetstore = SwaggerPetstore;
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var addPetOperationSpec = {
    httpMethod: "POST",
    path: "v2/pet",
    requestBody: {
        parameterPath: "body",
        mapper: __assign({}, Mappers.Pet, { required: true })
    },
    responses: {
        405: {},
        default: {}
    },
    serializer: serializer
};
var updatePetOperationSpec = {
    httpMethod: "PUT",
    path: "v2/pet",
    requestBody: {
        parameterPath: "body",
        mapper: __assign({}, Mappers.Pet, { required: true })
    },
    responses: {
        400: {},
        404: {},
        405: {},
        default: {}
    },
    serializer: serializer
};
var findPetsByStatusOperationSpec = {
    httpMethod: "GET",
    path: "v2/pet/findByStatus",
    queryParameters: [
        Parameters.status0
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Pet"
                        }
                    }
                }
            }
        },
        400: {},
        default: {}
    },
    serializer: serializer
};
var findPetsByTagsOperationSpec = {
    httpMethod: "GET",
    path: "v2/pet/findByTags",
    queryParameters: [
        Parameters.tags
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Pet"
                        }
                    }
                }
            }
        },
        400: {},
        default: {}
    },
    serializer: serializer
};
var getPetByIdOperationSpec = {
    httpMethod: "GET",
    path: "v2/pet/{petId}",
    urlParameters: [
        Parameters.petId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Pet
        },
        400: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var updatePetWithFormOperationSpec = {
    httpMethod: "POST",
    path: "v2/pet/{petId}",
    urlParameters: [
        Parameters.petId
    ],
    formDataParameters: [
        Parameters.name,
        Parameters.status1
    ],
    contentType: "application/x-www-form-urlencoded",
    responses: {
        405: {},
        default: {}
    },
    serializer: serializer
};
var deletePetOperationSpec = {
    httpMethod: "DELETE",
    path: "v2/pet/{petId}",
    urlParameters: [
        Parameters.petId
    ],
    headerParameters: [
        Parameters.apiKey
    ],
    responses: {
        400: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var uploadFileOperationSpec = {
    httpMethod: "POST",
    path: "v2/pet/{petId}/uploadImage",
    urlParameters: [
        Parameters.petId
    ],
    formDataParameters: [
        Parameters.additionalMetadata,
        Parameters.file
    ],
    contentType: "multipart/form-data",
    responses: {
        200: {
            bodyMapper: Mappers.ApiResponse
        },
        default: {}
    },
    serializer: serializer
};
var getInventoryOperationSpec = {
    httpMethod: "GET",
    path: "v2/store/inventory",
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Number"
                        }
                    }
                }
            }
        },
        default: {}
    },
    serializer: serializer
};
var placeOrderOperationSpec = {
    httpMethod: "POST",
    path: "v2/store/order",
    requestBody: {
        parameterPath: "body",
        mapper: __assign({}, Mappers.Order, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.Order
        },
        400: {},
        default: {}
    },
    serializer: serializer
};
var getOrderByIdOperationSpec = {
    httpMethod: "GET",
    path: "v2/store/order/{orderId}",
    urlParameters: [
        Parameters.orderId0
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Order
        },
        400: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var deleteOrderOperationSpec = {
    httpMethod: "DELETE",
    path: "v2/store/order/{orderId}",
    urlParameters: [
        Parameters.orderId1
    ],
    responses: {
        400: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var createUserOperationSpec = {
    httpMethod: "POST",
    path: "v2/user",
    requestBody: {
        parameterPath: "body",
        mapper: __assign({}, Mappers.User, { required: true })
    },
    responses: {
        default: {}
    },
    serializer: serializer
};
var createUsersWithArrayInputOperationSpec = {
    httpMethod: "POST",
    path: "v2/user/createWithArray",
    requestBody: {
        parameterPath: "body",
        mapper: {
            required: true,
            serializedName: "body",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Composite",
                        className: "User"
                    }
                }
            }
        }
    },
    responses: {
        default: {}
    },
    serializer: serializer
};
var createUsersWithListInputOperationSpec = {
    httpMethod: "POST",
    path: "v2/user/createWithList",
    requestBody: {
        parameterPath: "body",
        mapper: {
            required: true,
            serializedName: "body",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Composite",
                        className: "User"
                    }
                }
            }
        }
    },
    responses: {
        default: {}
    },
    serializer: serializer
};
var loginUserOperationSpec = {
    httpMethod: "GET",
    path: "v2/user/login",
    queryParameters: [
        Parameters.username,
        Parameters.password
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "String"
                }
            },
            headersMapper: Mappers.LoginUserHeaders
        },
        400: {
            headersMapper: Mappers.LoginUserHeaders
        },
        default: {}
    },
    serializer: serializer
};
var logoutUserOperationSpec = {
    httpMethod: "GET",
    path: "v2/user/logout",
    responses: {
        default: {}
    },
    serializer: serializer
};
var getUserByNameOperationSpec = {
    httpMethod: "GET",
    path: "v2/user/{username}",
    urlParameters: [
        Parameters.username
    ],
    responses: {
        200: {
            bodyMapper: Mappers.User
        },
        400: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var updateUserOperationSpec = {
    httpMethod: "PUT",
    path: "v2/user/{username}",
    urlParameters: [
        Parameters.username
    ],
    requestBody: {
        parameterPath: "body",
        mapper: __assign({}, Mappers.User, { required: true })
    },
    responses: {
        400: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
var deleteUserOperationSpec = {
    httpMethod: "DELETE",
    path: "v2/user/{username}",
    urlParameters: [
        Parameters.username
    ],
    responses: {
        400: {},
        404: {},
        default: {}
    },
    serializer: serializer
};
//# sourceMappingURL=swaggerPetstore.js.map